# Generated by Django 3.1.7 on 2021-03-28 01:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventID', models.AutoField(primary_key=True, serialize=False)),
                ('eventname', models.CharField(max_length=255)),
                ('tags', models.TextField()),
                ('school', models.CharField(default='', max_length=255)),
                ('description', models.TextField(default='')),
                ('info', models.TextField(default='')),
                ('applink', models.TextField(default='')),
            ],
            options={
                'db_table': 'Event',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Fund',
            fields=[
                ('fundID', models.AutoField(primary_key=True, serialize=False)),
                ('fundname', models.CharField(max_length=255)),
                ('tags', models.TextField()),
                ('school', models.CharField(default='', max_length=255)),
                ('description', models.TextField(default='')),
                ('info', models.TextField(default='')),
                ('applink', models.TextField(default='')),
            ],
            options={
                'db_table': 'Fund',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('postID', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('search', models.TextField(choices=[('Looking to Join', 'Looking to Join'), ('Looking for Researchers', 'Looking for Researchers')])),
                ('tags', models.TextField()),
                ('user', models.ForeignKey(db_column='id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Post',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Questioncomment',
            fields=[
                ('questioncommentID', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('post', models.ForeignKey(db_column='postID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.post')),
                ('user', models.ForeignKey(db_column='id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Questioncomment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('questionID', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('content', models.TextField(default='')),
                ('tags', models.TextField()),
                ('user', models.ForeignKey(db_column='id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Postcomment',
            fields=[
                ('postcommentID', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('post', models.ForeignKey(db_column='postID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.post')),
                ('user', models.ForeignKey(db_column='id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Postcomment',
                'managed': True,
            },
        ),
    ]
